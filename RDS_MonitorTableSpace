import json
import boto3
import base64
import os
import oracledb
import cryptography
import cryptography.hazmat.bindings
from cryptography.hazmat.primitives.kdf import pbkdf2
#from cryptography.hazmat.bindings import rust.abi3.so
import matplotlib.pyplot as plt
import numpy as np
import tempfile 
import io
import base64 



ses_client = boto3.client("ses")
 
# Constants for environment variables
HOST = os.getenv('host')
PORT = os.getenv('port')
SID = os.getenv('sid')
TS_THRESHOLD = int(os.getenv('ts_threshold'))
TABLESPACES = os.getenv('tablespace').split(',')
SECRET_NAME = os.getenv('secret_name')
REGION_NAME = os.getenv('region_name')
SES_SOURCE_EMAIL = os.getenv('ses_source_email')
SES_RECIPIENT_EMAILS = os.getenv('ses_recipient_emails').split(',')



def format_space(size_mb):
    """Formats the space in GB or MB"""
    if size_mb >= 1024:
        return f"{size_mb / 1024:.2f} GB"
    else:
        return f"{size_mb:.2f} MB"
 
def generate_bar_graph(tablespace, used_gb, free_gb):
    labels = ['Used Space', 'Free Space']
    values = [used_gb, free_gb]
 
    fig, ax = plt.subplots()
    bars = ax.bar(labels, values, color=['red', 'green'])
    ax.set_ylabel('Space in GB')
    ax.set_title(f'Space Utilization for {tablespace}')
 
    for bar in bars:
        height = bar.get_height()
        ax.annotate('{}'.format(height),
                    xy=(bar.get_x() + bar.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')
 
    # Resize the figure to reduce image size
    fig.set_size_inches(4, 3)
 
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=80)
    buf.seek(0)
    base64_img = base64.b64encode(buf.read()).decode('utf-8')
    buf.close()
    return base64_img
 
def lambda_handler(event, context):
    connection = None
    cursor = None
    try:
        print("Starting lambda execution")
        # Set up session and client
        session = boto3.Session()
        print("After session")
        client = session.client(service_name='secretsmanager', region_name=REGION_NAME)
        print("After client")
        # Calling SecretsManager
        get_secret_value_response = client.get_secret_value(SecretId=SECRET_NAME)
        print("After get secret", get_secret_value_response)
        # Extracting the key/value from the secret
        secret = json.loads(get_secret_value_response['SecretString'])
        db_user = secret['username']
        db_password = secret['password']
 
        # Connecting to RDS Oracle Database
        dsn_tns = oracledb.makedsn(HOST, PORT, SID)
        connection = oracledb.connect(user=db_user, password=db_password, dsn=dsn_tns)
        cursor = connection.cursor()
       
        print("Connected to database:", SID)
        print("Database Version:", connection.version)
 
        exceeded_threshold_tablespaces = []
        free_memory_tablespaces = []
 
        for tablespace in TABLESPACES:
            print("Fetching Utilization of tablespace:", tablespace)
            query = """
                SELECT ROUND(((t.totalspace - NVL(fs.freespace, 0)) / t.totalspace) * 100, 2) AS "Used_Percentage",
                       ROUND(t.totalspace / 1024, 2) AS "Total_GB",
                       ROUND((t.totalspace - NVL(fs.freespace, 0)) / 1024, 2) AS "Used_GB",
                       ROUND(NVL(fs.freespace, 0) / 1024, 2) AS "Free_GB"
                FROM (
                    SELECT SUM(d.bytes) / (1024 * 1024) AS totalspace, d.tablespace_name tablespace
                    FROM dba_data_files d
                    WHERE d.tablespace_name = :id
                    GROUP BY d.tablespace_name
                ) t
                LEFT JOIN (
                    SELECT SUM(f.bytes) / (1024 * 1024) AS freespace, f.tablespace_name tablespace
                    FROM dba_free_space f
                    WHERE f.tablespace_name = :id
                    GROUP BY f.tablespace_name
                ) fs ON t.tablespace = fs.tablespace
            """
            cursor.execute(query, {"id": tablespace})
 
            result = cursor.fetchone()
            if result:
                used_percentage, total_gb, used_gb, free_gb = result
                free_space = format_space(free_gb * 1024)  # Convert GB back to MB for formatting
                print(f"Tablespace: {tablespace} - Used: {used_percentage}%, Total: {total_gb}GB, Used: {used_gb}GB, Free: {free_space}")
 
                free_memory_tablespaces.append({
                    "tablespace": tablespace,
                    "free_gb": free_gb,
                    "free_space": free_space
                })
 
                if used_percentage > TS_THRESHOLD:
                    graph_img = generate_bar_graph(tablespace, used_gb, free_gb)
 
                    exceeded_threshold_tablespaces.append({
                        "tablespace": tablespace,
                        "used_percentage": used_percentage,
                        "total_gb": total_gb,
                        "used_gb": used_gb,
                        "free_space": free_space,
                        "graph_img": graph_img
                    })
 
        # Sort the free memory tablespaces by free_gb in ascending order
        free_memory_tablespaces = sorted(free_memory_tablespaces, key=lambda x: x['free_gb'])
 
        # Create a table for free memory of tablespaces
        free_memory_table = "<h2>Free Memory of Tablespaces in Ascending Order:</h2><table border='1'><tr><th>Tablespace</th><th>Free Space</th></tr>"
        for ts in free_memory_tablespaces:
            free_memory_table += f"<tr><td>{ts['tablespace']}</td><td>{ts['free_space']}</td></tr>"
        free_memory_table += "</table><br>"
 
        if exceeded_threshold_tablespaces:
            html_message = free_memory_table + "<h1>Tablespaces exceeding the threshold:</h1>"
            for ts in exceeded_threshold_tablespaces:
                html_message += (f"<h2>Tablespace: {ts['tablespace']} - Used: {ts['used_percentage']}%, "
                                 f"Total: {ts['total_gb']}GB, Used: {ts['used_gb']}GB, Free: {ts['free_space']}</h2>"
                                 f"<img src='data:image/png;base64,{ts['graph_img']}'/><br>")
 
            if len(html_message) > 256 * 1024:
                # If the message is still too long, summarize the information
                html_message = free_memory_table + "<h1>Tablespaces exceeding the threshold:</h1>"
                for ts in exceeded_threshold_tablespaces:
                    html_message += (f"<h2>Tablespace: {ts['tablespace']} - Used: {ts['used_percentage']}%, "
                                     f"Total: {ts['total_gb']}GB, Used: {ts['used_gb']}GB, Free: {ts['free_space']}</h2>")
 
            print("Sending email through SES")
            response = ses_client.send_email(
                Source=SES_SOURCE_EMAIL,
                Destination={
                    'ToAddresses': SES_RECIPIENT_EMAILS
                },
                Message={
                    'Subject': {
                        'Data': 'Oracle RDS Tablespace Utilization Alert'
                    },
                    'Body': {
                        'Html': {
                            'Data': html_message
                        }
                    }
                }
            )
            return {
                'statusCode': 200,
                'body': json.dumps(response)
            }
        else:
            print("No tablespaces exceeded the threshold")
            return {
                'statusCode': 200,
                'body': json.dumps("No tablespaces exceeded the threshold")
            }
 
    except Exception as e:
        print(f"Error: {str(e)}")
        return {
            'statusCode': 500,
            'body': f"Error: {str(e)}"
        }
    finally:
        # Close Cursor and Connection
        if cursor:
            cursor.close()
        if connection:
            connection.close()
